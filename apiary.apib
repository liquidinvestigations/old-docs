FORMAT: 1A
HOST: http://liquidinvestigations.apiblueprint.org/

# Liquid Investigations

API allowing for Liquid Investigations system management

# Group Initial Device Setup

## Registration [/api/registration]

### Get registration form defaults [GET]

This GET will return the default data for the initial network configuration
form. It will be allowed to happen only if the system has not been configured.

Note the things you GET aren't validated, because some have to be blank fields.

+ Response 200 (application/json)

        {
            "username": "admin",
            "password": "",
            "domain": "liquidnode.liquid",
            "lan": {
                "ip": "10.0.0.1",
                "netmask": "255.255.255.0",
                "dhcp_range": "10.0.0.100-255",
                "hotspot": {
                    "ssid": "",
                    "password": ""
                },
                "eth": false
            },
            "wan": {
                "wifi": {
                    "ssid": "",
                    "password": ""
                }
            },
            "ssh": {
                "enabled": false,
                "authorized_keys": [],
                "port": 22
            }
        }

+ Response 400 (application/json)

        {
            "detail": "Registration already done!"
        }

### Send initial admin registration [POST]

This POST will be allowed to happen only if the system has not been configured.

Validation for these fields:

- `username`: max length 64, min length 1, regex `^(\w|\.)+$`
- `pasword`: min length 8
- `domain`: regex `^((\w|-)+\.)+(\w+)$`
- ipv4 fields: validate using some library. These are the following:
    - `lan.ip`
    - `lan.netmask`
    - `wan.static.ip`
    - `wan.static.netmask`
    - `wan.static.gateway`
    - `wan.static.dns_server`
- `lan.hotspot.ssid` and `wan.wifi.ssid`: max length 31, min length 1
- `lan.hotspot.password` and `wan.wifi.password`: max length 63, min length 8
- `lan.eth`: boolean
- `wan.static`: is optional
- `ssh.authorized_keys`: list of strings
- `ssh.enabled`: boolean
- `ssh.port`: int, min 1, max 65535


+ Request

        {
            "username": "johnDoe",
            "password": "123b456x",
            "domain": "liquidnode.liquid",
            "lan": {
                "ip": "10.0.0.1",
                "netmask": "255.255.255.0",
                "dhcp_range": "10.0.0.100-255",
                "hotspot": {
                    "ssid": "123b456x",
                    "password": "123b456x"
                },
                "eth": false
            },
            "wan": {
                "wifi": {
                    "ssid": "123b456x",
                    "password": "123b456x"
                }
            },
            "ssh": {
                "enabled": false,
                "authorized_keys": [],
                "port": 22
            }
        }

+ Response 200

# Group Network Management

## Status [/api/network/status]

### Get Network Status [GET]

Returns a dictionary describing the current status of the network (connected? via which interfaces?
how many clients?)

+ Response 200 (application/json)

        {}


## Domain Configuration [/api/network/domain]

### Get Network Domain [GET]

+ Response 200 (application/json)

        {"domain": "liquid.local"}


### Update Network Domain [PUT]

Validation: see `/api/registration`.

+ Request

        {"domain": "liquid.local"}

+ Response 200 (application/json)


## LAN Configuration [/api/network/lan]

### Get Network LAN [GET]

+ Response 200 (application/json)

        {
            "lan": {
              "ip": "10.0.0.1",
              "netmask": "255.255.255.0",
              "dhcp_range": "10.0.0.100-255",
              "hotspot": {
                "ssid": "foo",
                "password": "bar"
              },
              "eth": false
            }
        }


### Update Network LAN [PUT]

Validation: see `/api/registration`.

+ Request

        {
            "lan": {
              "ip": "10.0.0.1",
              "netmask": "255.255.255.0",
              "dhcp_range": "10.0.0.100-255",
              "hotspot": {
                "ssid": "foo",
                "password": "bar"
              },
              "eth": false
            }
        }

+ Response 200 (application/json)

## WAN Configuration [/api/network/wan]

### Get Network WAN [GET]

+ Response 200 (application/json)

        {
            "wan": {
              "static": {
                "ip": "192.168.66.66",
                "netmask": "255.255.255.0",
                "gateway": "192.168.66.1",
                "dns_server": "192.168.66.1"
              },
              "wifi": {
                "ssid": "network",
                "password": "password"
              }
            }
        }


### Update Network WAN [PUT]

Validation: see `/api/registration`.

+ Request

        {
            "wan": {
              "static": {
                "ip": "192.168.66.66",
                "netmask": "255.255.255.0",
                "gateway": "192.168.66.1",
                "dns_server": "192.168.66.1"
              },
              "wifi": {
                "ssid": "network",
                "password": "password"
              }
            }
        }

+ Response 200 (application/json)

## SSH Configuration [/api/network/ssh]

### Get Network SSH config [GET]

+ Response 200 (application/json)

        {
            "ssh": {
              "enabled": true,
              "authorized_keys": [
                {"key": "key 1"},
                {"key": "key 2"},
                {"key": "key 3"}
              ],
              "port": 22
            }
        }

+ Response 500 (application/json)

### Update Network SSH config [PUT]

Validation: see `/api/registration`.

+ Request

        {
            "ssh": {
              "enabled": true,
              "authorized_keys": [
                {"key": "key 1"},
                {"key": "key 2"},
                {"key": "key 3"}
              ],
              "port": 22
            }
        }

+ Response 200 (application/json)


# Group Admin Panel


## Discovered Nodes [/api/nodes]

### Get List of Discovered Nodes [GET]
Returns the current list of discovered nodes.

+ Response 200 (application/json)

        [
            {
                "id": 28,
                "hostname": "foo.liquid",
                "is_trusted": true,
                "data": {
                    "address": "102.168.0.222",
                    "discovery_interface": "interface_name",
                    "last_seen_at": "date in ISO fmt",
                    "discovered_at": "date in ISO fmt"
                }
            },
            {
                "id": 29,
                "hostname": "bar.liquid",
                "is_trusted": false,
                "data": {
                    "address": "102.168.0.111",
                    "discovery_interface": "interface_name",
                    "last_seen_at": "date in ISO fmt",
                    "discovered_at": "date in ISO fmt"
                }
            }
        ]

## Specific Discovered Node [/api/nodes/{id}]

### Get specific node [GET]

+ Response 200 (application/json)

        {
            "id": 28,
            "hostname": "foo.liquid",
            "is_trusted": true,
            "data": {
                "address": "102.168.0.222",
                "discovery_interface": "interface_name",
                "last_seen_at": "date in ISO fmt",
                "discovered_at": "date in ISO fmt"
            }
        }

## Specific Node Whitelist [/api/nodes/{id}/trusted]

### Mark a node as whitelisted/not whitelisted [PUT]
Specify whether a node is in the whitelist.

+ Request

        {
            "is_trusted": true
        }

+ Request

        {
            "is_trusted": false
        }

+ Response 200 (application/json)


## List Supported Services [/api/services]

### Get list of supported services [GET]
Returns the details of all supported services and their status.

+ Response 200 (application/json)

        [
            {
                "name": "hypothesis",
                "is_enabled": true,
                "state_description": "starting",
                "error_message": null,
                "url": "hypothesis.liquid.domain"
            },
            {
                "name": "hoover",
                "is_enabled": false,
                "state_description": "error",
                "error_message": "Hoover crashed",
                "url": "hoover.liquid.domain"
            }
        ]

## Detail Supported Service [/api/services/{name}]

### Get details for supported service [GET]

+ Response 200 (application/json)


        {
            "name": "hoover",
            "is_enabled": false,
            "state_description": "error",
            "error_message": null,
            "url": "hoover.liquid.domain"
        }

## Enable Specific Service [/api/services/{name}/enabled]

### Set the status of the specified service [PUT]
Changes the status of the specified service.

If a service status is changed to 'disabled', it will be immediately
disabled and will not start on subsequent boots.

If a service status is changed to 'enabled', it will be immediately enabled
and will start on subsequent boots.

+ Request 200 (application/json)

        {
            "is_enabled": true
        }

+ Request 200 (application/json)

        {
            "is_enabled": false
        }


+ Response 200 (application/json)

## Current user data [/api/users/whoami]

### Find out what user is logged in [GET]

If the user "Mike Tyson" is logged in:

+ Response 200 (application/json)

        {
            "is_authenticated": true,
            "username": "admin",
            "is_admin": true,
            "first_name": "Mike",
            "last_name": "Tyson",
            "is_active": true
        }


+ Response 200 (application/json)

        {
            "is_authenticated": false
        }

## List User [/api/users]

### List users [GET]

+ Response 200 (application/json)

        [
            {
                "username": "admin",
                "is_admin": true,
                "first_name": "Mike",
                "last_name": "Tyson",
                "is_active": true
            },
            {
                "username": "gigel",
                "is_admin": false,
                "first_name": "Gigel",
                "last_name": "Ion",
                "is_active": true
            },
            {
                "username": "test",
                "is_admin": false,
                "first_name": "Test",
                "last_name": "McTest",
                "is_active": false
            },
            {
                "username": "vest",
                "is_admin": true,
                "first_name": "West",
                "last_name": "von Est",
                "is_active": false
            }
        ]

### Create new user [POST]

+ Request

        {
            "username": "admin",
            "is_admin": true,
            "first_name": "Mike",
            "last_name": "Tyson",
            "is_active": true
        }

+ Response 200

## Specific User [/api/users/{username}]

### Get Specific User [GET]

+ Response 200


        {
            "username": "admin",
            "is_admin": true,
            "first_name": "Mike",
            "last_name": "Tyson",
            "is_active": true
        }

### Edit User [PUT]

+ Request 200 (application/json)

        {
            "is_admin": true,
            "first_name": "Mike",
            "last_name": "Tyson",
            "is_active": true
        }

+ Response 200

## Specific User Set Active [/api/users/{username}/active]

### Set user as active [PUT]

+ Request 200 (application/json)

        {
            "is_active": true
        }

+ Response 200 (application/json)



## Change Password for Specific User [/api/users/{username}/password]

### Change User Password [POST]

If caller is admin, the `old_password` field is not needed.

Validation: min length 8 for both passwords.

+ Request

        {
            "old_password": "mama nu are mere",
            "new_password": "mama are mere"
        }

+ Response 200 (application/json)

## VPN [/api/vpn]
WIP - need to clearly