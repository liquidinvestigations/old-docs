FORMAT: 1A
HOST: http://liquidinvestigations.apiblueprint.org/

# Liquid Investigations

API allowing for Liquid Investigations system management

# Group Initial Device Setup

## Registration [/api/registration/]

### Get registration form defaults [GET]

This GET will return the default data for the initial network configuration
form. It will be allowed to happen only if the system has not been configured.

Note the things you GET aren't validated, because some have to be blank fields.

+ Response 200 (application/json)

        {
            "username": "admin",
            "password": "",
            "domain": "liquidnode.liquid",
            "lan": {
                "ip": "10.0.0.1",
                "netmask": "255.255.255.0",
                "dhcp_range": "10.0.0.100-255",
                "hotspot": {
                    "ssid": "",
                    "password": ""
                },
                "eth": false
            },
            "wan": {
                "wifi": {
                    "ssid": "",
                    "password": ""
                }
            },
            "ssh": {
                "enabled": false,
                "authorized_keys": [],
                "port": 22
            }
        }

+ Response 400 (application/json)

        {
            "detail": "Registration already done!"
        }

### Send initial admin registration [POST]

This POST will be allowed to happen only if the system has not been configured.

Validation for these fields:

- `username`: max length 64, min length 3, regex `^([a-zA-Z0-9_]|\.)+$`
- `pasword`: min length 8
- `domain`: regex `^(([a-zA-Z0-9_]|-)+\.)+([a-zA-Z0-9_]+)$`
- `ipv4 fields`: validate using some library. These are the following:
    - `lan.ip`
    - `lan.netmask`
    - `wan.static.ip`
    - `wan.static.netmask`
    - `wan.static.gateway`
    - `wan.static.dns_server`
- `lan.hotspot.ssid` and `wan.wifi.ssid`: max length 31, min length 1
- `lan.hotspot.password` and `wan.wifi.password`: max length 63, min length 8
- `lan.eth`: boolean
- `wan.static`: is optional
- `ssh.authorized_keys`: list of strings
- `ssh.enabled`: boolean
- `ssh.port`: int, min 1, max 65535


+ Request (application/json)

        {
            "username": "johnDoe",
            "password": "123b456x",
            "domain": "liquidnode.liquid",
            "lan": {
                "ip": "10.0.0.1",
                "netmask": "255.255.255.0",
                "dhcp_range": "10.0.0.100-255",
                "hotspot": {
                    "ssid": "123b456x",
                    "password": "123b456x"
                },
                "eth": false
            },
            "wan": {
                "wifi": {
                    "ssid": "123b456x",
                    "password": "123b456x"
                }
            },
            "ssh": {
                "enabled": false,
                "authorized_keys": [],
                "port": 22
            }
        }

+ Response 200

# Group Network Management

## Status [/api/network/status/]

### Get Network Status [GET]

Returns a dictionary describing the current status of the network (connected? via which interfaces?
how many clients?)

+ Response 200 (application/json)

        {
            "interfaces": [
                {
                    "name": "eth0",
                    "label": "Ethernet",
                    "is_up": true,
                    "ip_address": "192.168.22.22",
                    "error_message": null
                },
                {
                    "name": "wlan0",
                    "label": "Hotspot",
                    "is_up": true,
                    "ip_address": "192.168.22.22",
                    "ssid": "Liquid Network no. 2",
                    "error_message": null
                },
                {
                    "name": "wlan1",
                    "label": "WiFi Client",
                    "is_up": false,
                    "ip_address": null,
                    "ssid": null,
                    "error_message": "SSID 'SOME NETWORK' not found"
                }
            ]
        }


## Domain Configuration [/api/network/domain/]

### Get Network Domain [GET]

+ Response 200 (application/json)

        {
            "domain": "liquid.local"
        }


### Update Network Domain [PUT]

Validation: see `/api/registration/`.

+ Request (application/json)

        {
            "domain": "liquid.local"
        }

+ Response 200 (application/json)

+ Request (application/json)

        {
            "domain": "invalid?domain.com"
        }

+ Response 400 (application/json)

        {
            "domain": [
                "invalid hostname"
            ]
        }

## LAN Configuration [/api/network/lan/]

### Get Network LAN [GET]

+ Response 200 (application/json)

        {
          "ip": "10.0.0.1",
          "netmask": "255.255.255.0",
          "dhcp_range": "10.0.0.100-255",
          "hotspot": {
            "ssid": "foo",
            "password": "bar bar bar"
          },
          "eth": false
        }

### Update Network LAN [PUT]

Validation: see `/api/registration/`.

+ Request (application/json)

        {
          "ip": "10.0.0.1",
          "netmask": "255.255.255.0",
          "dhcp_range": "10.0.0.100-255",
          "hotspot": {
            "ssid": "foo",
            "password": "bar password bar"
          },
          "eth": false
        }

+ Response 200 (application/json)

+ Request (application/json)

        {
            "ip": "1000.0.0.1000",
            "netmask": "2550.255.255.0",
            "dhcp_range": null,
            "hotspot": {
                "ssid": "x",
                "password": "x"
            },
            "eth": "why?"
        }

+ Response 400 (application/json)

        {
            "ip": [
                "Enter a valid IPv4 address."
            ],
            "netmask": [
                "Enter a valid IPv4 address."
            ],
            "dhcp_range": [
                "This field may not be null."
            ],
            "hotspot": {
                "password": [
                    "Ensure this field has at least 8 characters."
                ]
            },
            "eth": [
                "\"why?\" is not a valid boolean."
            ]
        }

## WAN Configuration [/api/network/wan/]

### Get Network WAN [GET]

+ Response 200 (application/json)

        {
          "static": {
            "ip": "192.168.66.66",
            "netmask": "255.255.255.0",
            "gateway": "192.168.66.1",
            "dns_server": "192.168.66.1"
          },
          "wifi": {
            "ssid": "network",
            "password": "password foo bar"
          }
        }

### Update Network WAN [PUT]

Validation: see `/api/registration/`.

+ Request (application/json)

        {
          "static": {
            "ip": "192.168.66.66",
            "netmask": "255.255.255.0",
            "gateway": "192.168.66.1",
            "dns_server": "192.168.66.1"
          },
          "wifi": {
            "ssid": "network",
            "password": "password321"
          }
        }

+ Response 200 (application/json)

+ Request (application/json)

        {
            "wifi": {
                "ssid": "what a short",
                "password": "pass"
            }
        }

+ Response 400 (application/json)

        {
            "wifi": {
                "password": [
                    "Ensure this field has at least 8 characters."
                ]
            }
        }

## SSH Configuration [/api/network/ssh/]

### Get Network SSH config [GET]

+ Response 200 (application/json)

        {
          "enabled": true,
          "authorized_keys": [
            {"key": "key 1"},
            {"key": "key 2"},
            {"key": "key 3"}
          ],
          "port": 22
        }

### Update Network SSH config [PUT]

Validation: see `/api/registration/`.

+ Request (application/json)

        {
          "enabled": true,
          "authorized_keys": [
            {"key": "key 1"},
            {"key": "key 2"},
            {"key": "key 3"}
          ],
          "port": 22
        }

+ Response 200 (application/json)

+ Request (application/json)

        {
            "enabled": false,
            "authorized_keys": [{"key": ""}],
            "port": 0
        }
        
+ Response 400 (application/json)

        {
            "port": [
                "Ensure this value is greater than or equal to 1."
            ],
            "authorized_keys": [
                {
                    "key": [
                        "This field may not be blank."
                    ]
                }
            ]
        }

# Group Admin Panel


## Discovered Nodes [/api/nodes/]

### Get List of Discovered Nodes [GET]
Returns the current list of discovered nodes.

+ Response 200 (application/json)

        [
            {
                "id": 28,
                "hostname": "foo.liquid",
                "is_trusted": true,
                "data": {
                    "address": "102.168.0.222",
                    "discovery_interface": "interface_name",
                    "last_seen_at": "2017-10-23T12:21:19Z",
                    "discovered_at": "2017-10-23T12:21:19Z"
                }
            },
            {
                "id": 29,
                "hostname": "bar.liquid",
                "is_trusted": false,
                "data": {
                    "address": "102.168.0.111",
                    "discovery_interface": "interface_name",
                    "last_seen_at": "2017-10-23T12:21:19Z",
                    "discovered_at": "2017-10-23T12:21:19Z"
                }
            }
        ]

## Specific Discovered Node [/api/nodes/{id}/]

### Get specific node [GET]

+ Response 200 (application/json)

        {
            "id": 28,
            "hostname": "foo.liquid",
            "is_trusted": true,
            "data": {
                "address": "102.168.0.222",
                "discovery_interface": "interface_name",
                "last_seen_at": "2017-10-23T12:21:19Z",
                "discovered_at": "2017-10-23T12:21:19Z"
            }
        }

## Specific Node Whitelist [/api/nodes/{id}/trusted/]

### Mark a node as whitelisted/not whitelisted [PUT]
Specify whether a node is in the whitelist.

+ Request (application/json)

        {
            "is_trusted": true
        }

+ Response 200 (application/json)

+ Request (application/json)

        {
            "is_trusted": false
        }

+ Response 200 (application/json)


## List Supported Services [/api/services/]

### Get list of supported services [GET]
Returns the details of all supported services and their status.

+ Response 200 (application/json)

        [
            {
                "name": "hoover",
                "description": "Search Tool",
                "url": "http://hoover.liquiddemo.org",
                "is_enabled": true,
                "state": "running",
                "state_description": "Up and running",
                "error_message": null
            },
            {
                "name": "hypothesis",
                "description": "Annotations",
                "url": "http://hypothesis.liquiddemo.org",
                "is_enabled": true,
                "state": "starting",
                "state_description": "Waiting for it to be up...",
                "error_message": ""
            },
            {
                "name": "matrix",
                "description": "Chat Server",
                "url": "http://matrix.liquiddemo.org",
                "is_enabled": true,
                "state": "disabled",
                "state_description": "Disabled",
                "error_message": ""
            },
            {
                "name": "dokuwiki",
                "description": "Wiki Pages",
                "url": "http://dokuwiki.liquiddemo.org",
                "is_enabled": true,
                "state": "disabled",
                "state_description": "Disabled",
                "error_message": null
            },
            {
                "name": "davros",
                "description": "File Upload",
                "url": "http://davros.liquiddemo.org",
                "is_enabled": true,
                "state": "error",
                "state_description": "Error",
                "error_message": "does not work"
            }
        ]

## Detail Supported Service [/api/services/{name}/]

### Get details for supported service [GET]

+ Response 200 (application/json)

        {
            "name": "hoover",
            "description": "Search Tool",
            "is_enabled": false,
            "state_description": "error",
            "error_message": null,
            "url": "http://hoover.liquid.domain"
        }

## Enable Specific Service [/api/services/{name}/enabled/]

### Set the status of the specified service [PUT]
Changes the status of the specified service.

If a service status is changed to 'disabled', it will be immediately
disabled and will not start on subsequent boots.

If a service status is changed to 'enabled', it will be immediately enabled
and will start on subsequent boots.

+ Request (application/json)

        {
            "is_enabled": true
        }
        
+ Response 200 (application/json)

+ Request (application/json)

        {
            "is_enabled": true
        }
        
+ Response 500 (application/json)

        {
            "detail": "For some reason, that service cannot be enabled."
        }

+ Request (application/json)

        {
            "is_enabled": false
        }

+ Response 200 (application/json)

## Current user data [/api/users/whoami/]

### Find out what user is logged in [GET]

If the user "Mike Tyson" is logged in:

+ Response 200 (application/json)

        {
            "is_authenticated": true,
            "username": "admin",
            "is_admin": true,
            "first_name": "Mike",
            "last_name": "Tyson",
            "is_active": true
        }


+ Response 200 (application/json)

        {
            "is_authenticated": false
        }

## List User [/api/users/]

### List users [GET]

+ Response 200 (application/json)

        [
            {
                "username": "admin",
                "is_admin": true,
                "first_name": "Mike",
                "last_name": "Tyson",
                "is_active": true
            },
            {
                "username": "gigel",
                "is_admin": false,
                "first_name": "Gigel",
                "last_name": "Ion",
                "is_active": true
            },
            {
                "username": "test",
                "is_admin": false,
                "first_name": "Test",
                "last_name": "McTest",
                "is_active": false
            },
            {
                "username": "vest",
                "is_admin": true,
                "first_name": "West",
                "last_name": "von Est",
                "is_active": false
            }
        ]

### Create new user [POST]

+ Request (application/json)

        {
            "username": "admin",
            "is_admin": true,
            "first_name": "Mike",
            "last_name": "Tyson",
            "is_active": true
        }

+ Response 200

+ Request (application/json)

        {
            "username": "",
            "first_name": "",
            "last_name": "",
            "is_admin": false,
            "is_active": false
        }

+ Response 400 (application/json)

        {
            "username": [
                "This field may not be blank."
            ]
        }

## Specific User [/api/users/{username}/]

### Get Specific User [GET]

+ Response 200

        {
            "username": "admin",
            "is_admin": true,
            "first_name": "Mike",
            "last_name": "Tyson",
            "is_active": true
        }

### Edit User [PUT]

+ Request (application/json)

        {
            "username": "admin",
            "is_admin": true,
            "first_name": "Mike",
            "last_name": "Tyson",
            "is_active": true
        }

+ Response 200

+ Request (application/json)

        {
            "first_name": "Mike"
        }

+ Response 400 (application/json)

        {
            "username": [
                "This field is required."
            ],
            "is_admin": [
                "This field is required."
            ]
        }

## Specific User Set Active [/api/users/{username}/active/]

### Set user as active [PUT]

+ Request (application/json)

        {
            "is_active": true
        }

+ Response 200 (application/json)


## Change Password for Specific User [/api/users/{username}/password/]

### Change User Password [POST]

If caller is admin, the `old_password` field is not needed.

Validation: min length 8 for both passwords.

+ Request (application/json)

        {
            "old_password": "mama nu are mere",
            "new_password": "mama are mere"
        }

+ Response 200 (application/json)


## Configuration status [/api/configure/status/]

### Get status [GET]

+ Response 200 (application/json)

        {
            "status": "ok",
            "detail": "Everything works as expected"
        }

+ Response 200 (application/json)

        {
            "status": "configuring",
            "detail": "Currently doing some work"
        }

+ Response 200 (application/json)

        {
            "status": "broken",
            "detail": "Sorry about that. You should click on Repair"
        }

## Repair configuration [/api/configure/repair/]

### Send Repair configuration [POST]

+ Request  (application/json)

        {}

+ Response 200 (application/json)

        {
            "detail": "Repair job triggered."
        }

+ Request  (application/json)

        {}

+ Response 500 (application/json)

        {
            "detail": "Something really bad happened, delete everything and start over."
        }

# Group VPN

## Status [/api/vpn/]

### Get Status [GET]

Gets the current status of the VPN configuration.

+ Response 200 (application/json)

        {
            "server": {
                "state_description": "Up and running.",
                "is_enabled": true,
                "is_running": true,
                "registered_key_count": 5,
                "active_connection_count": 3,
                "error_message": null
            },
            "client": {
                "state_description": "Not configured.",
                "is_enabled": false,
                "is_running": false,
                "error_message": null
            }
        }
        
+ Response 200 (application/json)

        {
            "server": {
                "state_description": "Server is starting...",
                "is_enabled": true,
                "is_running": false,
                "registered_key_count": 0,
                "active_connection_count": 0,
                "error_message": null
            },
            "client": {
                "state_description": "Up and running.",
                "is_enabled": true,
                "is_running": true,
                "error_message": null
            }
        }
        
+ Response 200 (application/json)

        {
            "server": {
                "state_description": "Error",
                "is_enabled": true,
                "is_running": false,
                "registered_key_count": 0,
                "active_connection_count": 0,
                "error_message": "Can't do something"
            },
            "client": {
                "state_description": "Error",
                "is_enabled": true,
                "is_running": false,
                "error_message": "Can't do anything about it"
            }
        }


## VPN Server Enable [/api/vpn/server/]

### Set Server Enable [PUT]

+ Request (application/json)

        {
            "is_enabled": true
        }

+ Response 200

+ Request (application/json)

        {
            "is_enabled": false
        }

+ Response 200

+ Request (application/json)

        {
            "is_enabled": true
        }

+ Response 500 (application/json)

        {
            "detail": "Something really bad happened"
        }


## VPN Client Enable [/api/vpn/client/]

### Set Client Enable [PUT]

+ Request (application/json)

        {
            "is_enabled": false
        }

+ Response 200

+ Request (application/json)

        {
            "is_enabled": true
        }

+ Response 500 (application/json)

        {
            "detail": "Something really bad happened whily trying to enable the client"
        }


## VPN Server Key List [/api/vpn/server/keys/]

### List Server Keys [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "label": "Cheia lui Popescu",
                "revoked": false
            },
            {
                "id": 2,
                "label": "Cheia fratelui lui Popescu",
                "revoked": false
            },
            {
                "id": 3,
                "label": "Fosta cheie lui Popescu",
                "revoked": true,
                "revoked_reason": "I have another one",
                "revoked_at": "2017-10-23T12:21:19Z",
                "revoked_by": "popescu"
            },
            {
                "id": 5,
                "label": "Cheia fostei lui Popescu",
                "revoked": true,
                "revoked_reason": "I have another one",
                "revoked_at": "2017-10-23T12:21:19Z",
                "revoked_by": "popescu"
            }
        ]


## VPN Server Key List [/api/vpn/server/keys/generate/]

### Generate another key [POST]

+ Request (application/json)

        {
            "label": "another key please"
        }

+ Response 200 (application/json)

        {
            "id": 15,
            "label": "another key please",
            "revoked": false
        }

+ Request (application/json)

        {
            "label": "yet another key please"
        }

+ Response 500 (application/json)

        {
            "detail": "Couldn't do it, sorry"
        }


## VPN Server Key Specific Item [/api/vpn/server/keys/{id}/]

### Get Server Key Details [GET]

+ Response 200 (application/json)

        {
            "id": 3,
            "label": "Fosta cheie lui Popescu",
            "revoked": true,
            "revoked_reason": "I have another one",
            "revoked_at": "2017-10-23T12:21:19Z",
            "revoked_by": "popescu"
        }


## VPN Server Download Key [/api/vpn/server/keys/{id}/download/]

### Download key ovpn file [GET]

+ Response 200 (application/x-openvpn-profile)

        BINARY FILE HERE


## VPN Server Revoke Key [/api/vpn/server/keys/{id}/revoke/]

### Revoke specific key [POST]

+ Request (application/json)

        {
            "revoked_reason": "I don't like what's happening with this key"
        }

+ Response 200 (application/json)

        {
            "detail": "Client key revoked. It can never be brought back."
        }


## VPN Client Upload Configuration file [/api/vpn/client/upload/]

Allows the user to upload a new configuration file.
If they upload another key, this one will be overwritten.

### Upload New Configuration [POST]

+ Request (application/x-openvpn-profile)

        BINARY FILE HERE

+ Response 200 (application/json)

        {
            "detail": "Upload done."
        }

+ Request (application/x-openvpn-profile)

        INVALID BINARY FILE HERE

+ Response 400 (application/json)

        {
            "detail": "That OVPN configuration file is not valid."
        }

+ Request (application/x-openvpn-profile)

        WEIRD BINARY FILE HERE

+ Response 500 (application/json)

        {
            "detail": "Something really bad happened."
        }